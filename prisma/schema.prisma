generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  username     String    @unique @db.VarChar(255)
  password     String    @db.VarChar(255)
  email        String    @unique @db.VarChar(255)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  logoUrl      String    @db.VarChar(255)
  website      String    @db.VarChar(255)
  tag          String    @db.VarChar(255)
  businessName String    @db.VarChar(255)
  products     Product[]
  orders       Order[]
  ekyash       Ekyash?
}

enum OrderStatus {
  Pending
  Completed
  Failed
}

enum Currency {
  BZD
  USD
}

model Ekyash {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  sid        BigInt   @db.BigInt
  pinHash    String   @db.VarChar(255)
  pinEncoded String   @db.VarChar(255)
  phone      String   @db.VarChar(255)
  apiKey     String   @db.VarChar(255)
  user       User     @relation(fields: [userId], references: [id])
  userId     Int      @unique
}

enum EKyashStatus {
  New
  Pending
  Canceled
  Success
}

model EKyashTransaction {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deepLinkUrl   String       @db.VarChar(255)
  qrCodeUrl     String       @db.VarChar(255)
  status        EKyashStatus @default(Pending)
  invoiceId     String       @db.VarChar(255)
  transactionId String?      @db.VarChar(255)
  invoiceUrl    String?      @db.VarChar(255)
  order         Order        @relation(fields: [orderId], references: [id])
  orderId       Int          @unique
}

model Order {
  id                Int                @id @default(autoincrement())
  description       String             @db.VarChar(255)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  invoice           String             @unique @db.VarChar(255)
  status            OrderStatus        @default(Pending)
  currency          Currency           @default(BZD)
  amount            Int
  additionalData    Json
  orderItems        OrderItem[]
  ekyashTransaction EKyashTransaction?
  product           Product?           @relation(fields: [productId], references: [id])
  productId         Int?
  user              User?              @relation(fields: [userId], references: [id])
  userId            Int?
}

model OrderItem {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  quantity    Int
  description String   @db.VarChar(255)
  price       Int
  currency    Currency @default(BZD)
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     Int
}

model PaymentLink {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  url       String   @db.VarChar(255)
}

model Product {
  id             Int           @id @default(autoincrement())
  name           String        @db.VarChar(255)
  description    String        @db.VarChar(255)
  price          Int
  currency       Currency      @default(BZD)
  coverImage     String        @db.VarChar(255)
  thumbnailImage String        @db.VarChar(255)
  published      Boolean       @default(false) @db.Boolean
  publicUrl      String        @db.VarChar(255)
  orders         Order[]
  user           User          @relation(fields: [userId], references: [id])
  userId         Int
  paymentLinks   PaymentLink[]
}
